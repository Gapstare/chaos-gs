# FIXME: Should support a toplevel Rakefile.local or something where you can define this, so you don't have to override it on the command line every time you build.
CC = ENV['CC'] || 'x86_64-pc-linux-gcc'

DEFINES = (ENV['DEFINES'] || '') + " -DPACKAGE=\\\"storm\\\" -DVERSION=\\\"git\\\""

CFLAGS = 
"-Wall -W -Wshadow -Wpointer-arith -Waggregate-return -Wstrict-prototypes \
-Wredundant-decls -Winline -Wmissing-prototypes -Werror -Wcast-align \
-Wbad-function-cast -Wsign-compare -Wmissing-declarations \
-Wmissing-noreturn -pipe -Wnested-externs -O3 -fno-builtin -funsigned-char \
-g -m32 -fomit-frame-pointer -ffreestanding #{ENV['EXTRA_CFLAGS']} #{DEFINES}"

INCLUDES =
"-I../include \
-I.. \
-I."

ALL_OBJECTS = %w(
  arguments.o
  avl.o
  avl_debug.o
  avl_rotate.o
  avl_update.o
  avl_delete.o
  debug.o
  idle.o
  init.o
  kernelfs.o
  log.o
  mailbox.o
  memory.o
  service.o
  slab.o
  system_call.o
  tag.o
  time.o
)

verbose false

task :default => [ :banner ] + ALL_OBJECTS do
  puts
end

task :banner do
  print "Compiling ".bold
  print "storm/generic".cyan.bold
  puts "..."

  $stdout.print "    "
end

task :clean do
  rm_f ALL_OBJECTS
end

rule '.o' => [ '.c' ] do |t|
  print((t.source + ' ').cyan)
  sh "#{CC} -o #{t.name} #{CFLAGS} #{INCLUDES} -c #{t.source}"
end
