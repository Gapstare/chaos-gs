DEFINES = (ENV['DEFINES'] || '') + " -DPACKAGE=\\\"storm\\\" -DVERSION=\\\"git\\\" -DCREATOR=\\\"`whoami`@`hostname`\\\""

CFLAGS = 
"-Wall -Wextra -Wshadow -Wpointer-arith -Waggregate-return -Wstrict-prototypes \
-Wredundant-decls -Winline -Wmissing-prototypes -Wcast-align \
-Wbad-function-cast -Wmissing-declarations -Wmissing-noreturn -Wnested-externs \
-Werror -pipe -O3 -fno-builtin -funsigned-char \
-g -m32 -fomit-frame-pointer -ffreestanding --std=gnu99 #{ENV['EXTRA_CFLAGS']} #{DEFINES}"

INCLUDES = %w(
  -I../include
  -I..
  -I.
)

OBJECTS = %w(
  cluster.o
  cpuid.o
  debug.o
  dispatch.o
  dma.o
  elf.o
  gdt.o
  idt.o
  init.o
  irq.o
  irq_handlers.o
  limits.o
  main.o
  memory.o
  memory_global.o
  memory_physical.o
  memory_virtual.o
  multiboot.o
  mutex.o
  port.o
  process.o
  string.o
  system_calls-auto.o
  system_calls.o
  thread.o
  time.o
  timer.o
  trap.o
  wrapper.o
  compiler_rt/udivdi3.o
  compiler_rt/umoddi3.o
)

OUTPUT_LIB = 'libstorm_ia32.a'
OUTPUT = 'storm'
LDFLAGS = '-nostdlib -Wl,-T,kernel.ld -m32'

task :default => [ :banner, :storm ] + OBJECTS do
  puts
end

task :banner do
  print "Compiling ".bold
  print "storm/ia32".cyan.bold
  puts "..."

  print "    "
end

# TODO: Check if we can get Rake's automatic 'clean' support working, so we don't have to do this manually.
task :clean do
  rm_f OBJECTS
end

task :install => [ :default ] do
  sh "install #{OUTPUT} #{INSTALL_ROOT}"
end

file OUTPUT => [ OUTPUT_LIB ] do |t|
  begin
    puts '    Linking...'.blue.bold

    # It's crazy, but we actually have to specify the OUTPUT_LIB twice here (since ia32 has references to the generic lib and
    # the generic lib has references to ia32... We could try to get rid of that eventually.)
    command = "#{CC} -o #{t.name} #{OUTPUT_LIB} ../generic/#{STORM_GENERIC_LIB} #{OUTPUT_LIB} #{LDFLAGS}"
    sh command
  rescue
    puts "Error linking kernel. Full command line was: #{command}"
    raise
  end
end

file OUTPUT_LIB => OBJECTS do |t|
  puts
  puts '    Creating archive...'.blue.bold
  sh "#{AR} r --target=elf32-i386 #{t.name} #{t.prerequisites.join ' '}"
end
